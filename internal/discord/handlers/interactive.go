package handlers

import (
	"fmt"
	"log"
	"strings"

	"github.com/bwmarrin/discordgo"
	"github.com/oatsaysai/billing-in-discord/internal/db"
)

// HandleInteractiveMyDebts shows debts with interactive UI
func HandleInteractiveMyDebts(s *discordgo.Session, m *discordgo.MessageCreate, args []string) {
	userID := m.Author.ID
	userDbID, err := db.GetOrCreateUser(userID)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
		return
	}

	// Get debts
	debts, err := db.GetUserDebtsWithDetails(userDbID, true)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡πÑ‡∏î‡πâ")
		return
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Discord
	EnhanceDebtsWithUsernames(s, debts)

	// Create message content
	content := fmt.Sprintf("**‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á <@%s> (‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô):**\n\n", userID)

	if len(debts) == 0 {
		content += "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ üéâ"
		s.ChannelMessageSend(m.ChannelID, content)
		return
	}

	// Add summary
	var totalAmount float64
	for _, debt := range debts {
		totalAmount += debt.Amount
		content += fmt.Sprintf("- **%.2f ‡∏ö‡∏≤‡∏ó** ‡πÉ‡∏´‡πâ <@%s>\n", debt.Amount, debt.OtherPartyDiscordID)
	}
	content += fmt.Sprintf("\n**‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: %.2f ‡∏ö‡∏≤‡∏ó**\n", totalAmount)
	content += "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"

	// Create components (buttons)
	var components []discordgo.MessageComponent

	// Create ActionsRow for each debt
	for _, debt := range debts {
		// ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Discord
		displayName := debt.OtherPartyName
		if displayName == "" {
			displayName = GetDiscordUsername(s, debt.OtherPartyDiscordID)
		}

		components = append(components, discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{
					Label:    fmt.Sprintf("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ %s", displayName),
					Style:    discordgo.SecondaryButton,
					CustomID: fmt.Sprintf("%sc%s", viewDetailButtonPrefix, debt.OtherPartyDiscordID),
				},
				discordgo.Button{
					Label:    fmt.Sprintf("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ %s", displayName),
					Style:    discordgo.PrimaryButton,
					CustomID: fmt.Sprintf("%s%s", payDebtButtonPrefix, debt.OtherPartyDiscordID),
				},
			},
		})
	}

	// Send message with components
	_, err = s.ChannelMessageSendComplex(m.ChannelID, &discordgo.MessageSend{
		Content:    content,
		Components: components,
	})
	if err != nil {
		log.Printf("Error sending interactive mydebts message: %v", err)
	}
}

// HandleInteractiveOwedToMe shows dues with interactive UI
func HandleInteractiveOwedToMe(s *discordgo.Session, m *discordgo.MessageCreate, args []string) {
	userID := m.Author.ID
	userDbID, err := db.GetOrCreateUser(userID)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
		return
	}

	// Get debts (as creditor, not debtor)
	debts, err := db.GetUserDebtsWithDetails(userDbID, false)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÑ‡∏î‡πâ")
		return
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Discord
	EnhanceDebtsWithUsernames(s, debts)

	// Create message content
	content := fmt.Sprintf("**‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ñ‡∏∂‡∏á <@%s> (‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢):**\n\n", userID)

	if len(debts) == 0 {
		content += "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ üëç"
		s.ChannelMessageSend(m.ChannelID, content)
		return
	}

	// Add summary
	var totalAmount float64
	for _, debt := range debts {
		totalAmount += debt.Amount
		content += fmt.Sprintf("- <@%s> ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏µ‡πâ **%.2f ‡∏ö‡∏≤‡∏ó**\n", debt.OtherPartyDiscordID, debt.Amount)
	}
	content += fmt.Sprintf("\n**‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: %.2f ‡∏ö‡∏≤‡∏ó**\n", totalAmount)
	content += "‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"

	// Create components (buttons) - one row per debtor
	var components []discordgo.MessageComponent

	for _, debt := range debts {
		// ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Discord
		displayName := debt.OtherPartyName
		if displayName == "" {
			displayName = GetDiscordUsername(s, debt.OtherPartyDiscordID)
		}

		components = append(components, discordgo.ActionsRow{
			Components: []discordgo.MessageComponent{
				discordgo.Button{
					Label:    fmt.Sprintf("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà %s ‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞", displayName),
					Style:    discordgo.SecondaryButton,
					CustomID: fmt.Sprintf("view_detail_d%s", debt.OtherPartyDiscordID),
				},
				discordgo.Button{
					Label:    fmt.Sprintf("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á %s", displayName),
					Style:    discordgo.PrimaryButton,
					CustomID: fmt.Sprintf("request_payment_%s", debt.OtherPartyDiscordID),
				},
			},
		})
	}

	// Send message with components
	_, err = s.ChannelMessageSendComplex(m.ChannelID, &discordgo.MessageSend{
		Content:    content,
		Components: components,
	})
	if err != nil {
		log.Printf("Error sending interactive owedtome message: %v", err)
	}
}

// HandleSelectTransaction displays a selection UI for transactions
func HandleSelectTransaction(s *discordgo.Session, m *discordgo.MessageCreate, args []string) {
	// Parse command arguments: !selecttx [filter]
	var filter string
	if len(args) > 1 {
		filter = strings.ToLower(args[1])
	}

	userID := m.Author.ID
	userDbID, err := db.GetOrCreateUser(userID)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
		return
	}

	// Get transactions based on filter
	var txs []map[string]interface{}
	switch filter {
	case "unpaid":
		// Get unpaid transactions where user is debtor
		txs, err = db.GetUserTransactions(userDbID, true, false, 25)
	case "paid":
		// Get paid transactions
		txs, err = db.GetUserTransactions(userDbID, true, true, 25)
	case "due":
		// Get unpaid transactions where user is creditor
		txs, err = db.GetUserTransactions(userDbID, false, false, 25)
	default:
		// Get all transactions involving user (limit to 25 most recent)
		txs, err = db.GetAllUserTransactions(userDbID, 25)
	}

	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ")
		return
	}

	if len(txs) == 0 {
		s.ChannelMessageSend(m.ChannelID, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
		return
	}

	// Create content header based on filter
	var content string
	switch filter {
	case "unpaid":
		content = "**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞:**\n"
	case "paid":
		content = "**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß:**\n"
	case "due":
		content = "**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì:**\n"
	default:
		content = "**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (25 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):**\n"
	}

	content += "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:\n"

	// Create a selection menu
	var options []discordgo.SelectMenuOption
	for _, tx := range txs {
		txID := tx["id"].(int)
		description := tx["description"].(string)
		amount := tx["amount"].(float64)
		isPaid := tx["already_paid"].(bool)
		otherPartyDiscordID := tx["other_party_discord_id"].(string)

		// ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Discord
		otherPartyName := GetDiscordUsername(s, otherPartyDiscordID)

		// Truncate description if too long
		shortDesc := description
		if len(shortDesc) > 45 {
			shortDesc = shortDesc[:42] + "..."
		}

		// Format option label
		var label string
		if isPaid {
			label = fmt.Sprintf("#%d: %.2f ‡∏ö‡∏≤‡∏ó (%s) - ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß", txID, amount, otherPartyName)
		} else {
			label = fmt.Sprintf("#%d: %.2f ‡∏ö‡∏≤‡∏ó (%s)", txID, amount, otherPartyName)
		}

		// ‡∏ñ‡πâ‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (Discord ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà 100 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
		if len(label) > 90 {
			if isPaid {
				label = fmt.Sprintf("#%d: %.2f ‡∏ö‡∏≤‡∏ó - ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß", txID, amount)
			} else {
				label = fmt.Sprintf("#%d: %.2f ‡∏ö‡∏≤‡∏ó", txID, amount)
			}
		}

		// Create option
		options = append(options, discordgo.SelectMenuOption{
			Label:       label,
			Description: shortDesc,
			Value:       fmt.Sprintf("tx_%d", txID),
			Emoji: &discordgo.ComponentEmoji{
				Name: func() string {
					if isPaid {
						return "‚úÖ"
					}
					return "üí∏"
				}(),
			},
		})
	}

	// Create the dropdown component
	dropdown := discordgo.SelectMenu{
		CustomID:    debtDropdownID,
		Placeholder: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π",
		Options:     options,
	}

	// Send message with dropdown
	_, err = s.ChannelMessageSendComplex(m.ChannelID, &discordgo.MessageSend{
		Content: content,
		Components: []discordgo.MessageComponent{
			discordgo.ActionsRow{
				Components: []discordgo.MessageComponent{
					dropdown,
				},
			},
		},
	})
	if err != nil {
		log.Printf("Error sending transaction selection menu: %v", err)
	}
}

// HandleInteractiveRequestPayment displays an interactive payment request UI
func HandleInteractiveRequestPayment(s *discordgo.Session, m *discordgo.MessageCreate, args []string) {
	// Parse command: !request @user
	if len(args) < 2 || !userMentionRegex.MatchString(args[1]) {
		SendErrorMessage(s, m.ChannelID, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ: `!irequest @‡∏•‡∏π‡∏Å‡∏´‡∏ô‡∏µ‡πâ`")
		return
	}

	// Extract IDs
	creditorDiscordID := m.Author.ID
	debtorDiscordID := userMentionRegex.FindStringSubmatch(args[1])[1]

	// ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Discord
	debtorName := GetDiscordUsername(s, debtorDiscordID)

	// Get DB IDs
	creditorDbID, err := db.GetOrCreateUser(creditorDiscordID)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
		return
	}

	debtorDbID, err := db.GetOrCreateUser(debtorDiscordID)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, fmt.Sprintf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏´‡∏ô‡∏µ‡πâ <@%s> ‡πÑ‡∏î‡πâ", debtorDiscordID))
		return
	}

	// Get total debt amount
	totalDebtAmount, err := db.GetTotalDebtAmount(debtorDbID, creditorDbID)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ")
		return
	}

	if totalDebtAmount <= 0.01 {
		s.ChannelMessageSend(m.ChannelID, fmt.Sprintf("‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! %s ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏´‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", debtorName))
		return
	}

	// Get PromptPay ID
	promptPayID, err := db.GetUserPromptPayID(creditorDbID)
	if err != nil {
		promptPayID = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ !setpromptpay)"
	}

	// Get unpaid transactions
	unpaidTxIDs, unpaidTxDetails, _, err := db.GetUnpaidTransactionIDsAndDetails(debtorDbID, creditorDbID, 10)
	if err != nil {
		log.Printf("Error fetching transaction details for request payment: %v", err)
		// Continue even if this fails
	}

	// Create content
	content := fmt.Sprintf("**‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ñ‡∏∂‡∏á %s (<@%s>)**\n"+
		"‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: **%.2f ‡∏ö‡∏≤‡∏ó**\n\n"+
		"PromptPay ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞: `%s`\n\n",
		debtorName, debtorDiscordID, totalDebtAmount, promptPayID)

	if unpaidTxDetails != "" {
		content += "**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞:**\n" + unpaidTxDetails
	}

	// Create components
	var components []discordgo.MessageComponent

	components = append(components, discordgo.ActionsRow{
		Components: []discordgo.MessageComponent{
			discordgo.Button{
				Label:    "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
				Style:    discordgo.PrimaryButton,
				CustomID: fmt.Sprintf("%s%s", requestPaymentButtonPrefix, debtorDiscordID),
			},
			discordgo.Button{
				Label:    "‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
				Style:    discordgo.SecondaryButton,
				CustomID: fmt.Sprintf("%sd%s", viewDetailButtonPrefix, debtorDiscordID),
			},
		},
	})

	// Add QR code generation button if we have promptPayID
	if promptPayID != "" && promptPayID != "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ !setpromptpay)" {
		// Send message first
		_, err := s.ChannelMessageSendComplex(m.ChannelID, &discordgo.MessageSend{
			Content:    content,
			Components: components,
		})
		if err != nil {
			log.Printf("Error sending interactive request message: %v", err)
			return
		}

		// Then generate QR code
		GenerateAndSendQrCode(s, m.ChannelID, promptPayID, totalDebtAmount, debtorDiscordID,
			fmt.Sprintf("‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å <@%s>", creditorDiscordID), unpaidTxIDs)
	} else {
		// Just send the message without QR code
		_, err = s.ChannelMessageSendComplex(m.ChannelID, &discordgo.MessageSend{
			Content:    content + "\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö PromptPay ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
			Components: components,
		})
		if err != nil {
			log.Printf("Error sending interactive request message: %v", err)
		}
	}
}
