package handlers

import (
	"context"
	"fmt"
	"log"
	"math/rand"

	"github.com/bwmarrin/discordgo"
	"github.com/oatsaysai/billing-in-discord/internal/db"
)

// AutomaticPraiseMessage represents a praise message template
type AutomaticPraiseMessage struct {
	Message string
	Emoji   string
}

// Praise message templates
var praiseMessages = []AutomaticPraiseMessage{
	{Message: "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô", Emoji: "üèÜ"},
	{Message: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡πÄ‡∏£‡∏≤‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤", Emoji: "‚ö°"},
	{Message: "‡∏ß‡πâ‡∏≤‡∏ß! ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ", Emoji: "üöÄ"},
	{Message: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏ô‡∏≤‡∏ô", Emoji: "‚è±Ô∏è"},
	{Message: "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏µ‡πÉ‡∏à‡∏ö‡∏∏‡∏ç‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!", Emoji: "üí∏"},
	{Message: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å", Emoji: "üëè"},
	{Message: "‡∏Ç‡∏≠‡∏õ‡∏£‡∏ö‡∏°‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å! ‡∏û‡∏ß‡∏Å‡πÄ‡∏£‡∏≤‡∏ã‡∏≤‡∏ö‡∏ã‡∏∂‡πâ‡∏á‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß", Emoji: "üåü"},
}

// SendAutomaticPraise sends an automatic praise message to the first person who paid
func SendAutomaticPraise(s *discordgo.Session, channelID string, txID int, payerDiscordID string) error {
	// Check if this transaction's rank 1 has already been praised
	var alreadyPraised bool
	err := db.Pool.QueryRow(context.Background(), `
		SELECT received_praise FROM bill_payment_ranking 
		WHERE bill_id = $1 AND rank = 1
	`, txID).Scan(&alreadyPraised)

	if err != nil {
		log.Printf("Error checking if praise already given for TxID %d: %v", txID, err)
		// Continue anyway - might be a brand new payment
		alreadyPraised = false
	}

	if alreadyPraised {
		// Already praised this payment, no need to do it again
		return nil
	}

	// Get transaction details
	txInfo, err := db.GetTransactionInfo(txID)
	if err != nil {
		return fmt.Errorf("error getting transaction info: %w", err)
	}

	// Get creditor (payee) discord ID
	creditorDbID := txInfo["payee_id"].(int)
	creditorDiscordID, err := db.GetDiscordIDFromDbID(creditorDbID)
	if err != nil {
		return fmt.Errorf("error getting creditor discord ID: %w", err)
	}

	// Select a random praise message
	praiseTemplate := praiseMessages[rand.Intn(len(praiseMessages))]

	// Create embed message
	praiseEmbed := &discordgo.MessageEmbed{
		Title: fmt.Sprintf("%s ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß!", praiseTemplate.Emoji),
		Description: fmt.Sprintf("**<@%s>** %s\n\n"+
			"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß!",
			payerDiscordID, praiseTemplate.Message),
		Color: 0x00FF00, // Green
		Fields: []*discordgo.MessageEmbedField{
			{
				Name: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
				Value: fmt.Sprintf("**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:** %.2f ‡∏ö‡∏≤‡∏ó\n"+
					"**‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô:** <@%s>\n"+
					"**TxID:** %d",
					txInfo["amount"].(float64), creditorDiscordID, txID),
			},
		},
	}

	// Send the praise message
	_, err = s.ChannelMessageSendEmbed(channelID, praiseEmbed)
	if err != nil {
		return fmt.Errorf("error sending praise message: %w", err)
	}

	// Mark as praised in the database
	err = db.MarkPraiseGiven(txID, 1)
	if err != nil {
		log.Printf("Error marking praise given: %v", err)
		// Continue anyway
	}

	// Check for badges
	badges, err := db.CheckBadgeEligibility(payerDiscordID)
	if err != nil {
		log.Printf("Error checking badges after automatic praise: %v", err)
	} else if len(badges) > 0 {
		CheckAndAwardBadges(s, payerDiscordID, channelID)
	}

	return nil
}
