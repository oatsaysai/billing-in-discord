package handlers

import (
	"fmt"
	"log"
	"strings"

	"github.com/bwmarrin/discordgo"
	"github.com/oatsaysai/billing-in-discord/internal/db"
)

// HandleMyDebts handles the !mydebts command
func HandleMyDebts(s *discordgo.Session, m *discordgo.MessageCreate, args []string) {
	queryAndSendDebts(s, m, m.Author.ID, "debtor")
}

// HandleOwedToMe handles the !owedtome and !mydues commands
func HandleOwedToMe(s *discordgo.Session, m *discordgo.MessageCreate, args []string) {
	queryAndSendDebts(s, m, m.Author.ID, "creditor")
}

// HandleDebtsOfUser handles the !debts command
func HandleDebtsOfUser(s *discordgo.Session, m *discordgo.MessageCreate, args []string) {
	if len(args) < 2 || !userMentionRegex.MatchString(args[1]) {
		SendErrorMessage(s, m.ChannelID, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ `!debts @user`")
		return
	}
	targetUserDiscordID := userMentionRegex.FindStringSubmatch(args[1])[1]
	queryAndSendDebts(s, m, targetUserDiscordID, "debtor")
}

// HandleDuesForUser handles the !dues command
func HandleDuesForUser(s *discordgo.Session, m *discordgo.MessageCreate, args []string) {
	if len(args) < 2 || !userMentionRegex.MatchString(args[1]) {
		SendErrorMessage(s, m.ChannelID, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ `!dues @user`")
		return
	}
	targetUserDiscordID := userMentionRegex.FindStringSubmatch(args[1])[1]
	queryAndSendDebts(s, m, targetUserDiscordID, "creditor")
}

// queryAndSendDebts queries and sends debt information
func queryAndSendDebts(s *discordgo.Session, m *discordgo.MessageCreate, principalDiscordID string, mode string) {
	principalDbID, err := db.GetOrCreateUser(principalDiscordID)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, fmt.Sprintf("‡πÑ‡∏°‡πà‡∏û‡∏ö <@%s> ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", principalDiscordID))
		return
	}

	// Get debts with transaction details from the db package
	isDebtor := mode == "debtor"
	debts, err := db.GetUserDebtsWithDetails(principalDbID, isDebtor)
	if err != nil {
		SendErrorMessage(s, m.ChannelID, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡πÑ‡∏î‡πâ")
		log.Printf("Error querying debts with details (mode: %s) for %s (dbID %d): %v",
			mode, principalDiscordID, principalDbID, err)
		return
	}

	// ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Discord
	principalName := GetDiscordUsername(s, principalDiscordID)

	// Format the title based on the mode
	var title string
	if isDebtor {
		title = fmt.Sprintf("‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á %s (<@%s>) (‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô):\n", principalName, principalDiscordID)
	} else {
		title = fmt.Sprintf("‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ñ‡∏∂‡∏á %s (<@%s>) (‡∏ó‡∏µ‡πà‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢):\n", principalName, principalDiscordID)
	}

	// Build the response
	var response strings.Builder
	response.WriteString(title)

	// Handle case with no debts
	if len(debts) == 0 {
		if isDebtor {
			response.WriteString(fmt.Sprintf("%s ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏µ‡πâ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞! üéâ\n", principalName))
		} else {
			response.WriteString(fmt.Sprintf("‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏à‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ %s ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß üëç\n", principalName))
		}
	} else {
		// Format each debt with its details
		for _, debt := range debts {
			// ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°
			otherPartyName := GetDiscordUsername(s, debt.OtherPartyDiscordID)

			// Truncate details if too long
			details := debt.Details
			maxDetailLen := 150 // Max length for details string in the summary
			if len(details) > maxDetailLen {
				details = details[:maxDetailLen-3] + "..."
			}

			// Format based on the mode
			if isDebtor {
				response.WriteString(fmt.Sprintf("- **%.2f ‡∏ö‡∏≤‡∏ó** ‡πÉ‡∏´‡πâ %s (<@%s>) (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: %s)\n",
					debt.Amount, otherPartyName, debt.OtherPartyDiscordID, details))
			} else {
				response.WriteString(fmt.Sprintf("- %s (<@%s>) ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏µ‡πâ **%.2f ‡∏ö‡∏≤‡∏ó** (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: %s)\n",
					otherPartyName, debt.OtherPartyDiscordID, debt.Amount, details))
			}
		}
	}

	// Send the response
	s.ChannelMessageSend(m.ChannelID, response.String())
}
