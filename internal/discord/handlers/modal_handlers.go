package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/bwmarrin/discordgo"
	"github.com/oatsaysai/billing-in-discord/internal/db"
)

// handlePayDebtModalSubmit handles the pay debt modal submission
func handlePayDebtModalSubmit(s *discordgo.Session, i *discordgo.InteractionCreate) {
	// Extract the creditor's Discord ID from the custom ID
	customID := i.ModalSubmitData().CustomID
	creditorDiscordID := strings.TrimPrefix(customID, "modal_pay_debt_")

	if creditorDiscordID == "" {
		respondWithError(s, i, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
		return
	}

	debtorDiscordID := i.Member.User.ID

	// Get DB IDs
	debtorDbID, err := db.GetOrCreateUser(debtorDiscordID)
	if err != nil {
		respondWithError(s, i, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
		return
	}

	creditorDbID, err := db.GetOrCreateUser(creditorDiscordID)
	if err != nil {
		respondWithError(s, i, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ")
		return
	}

	// Extract form data
	var paymentAmount float64
	var paymentNote string

	for _, component := range i.ModalSubmitData().Components {
		for _, c := range component.(*discordgo.ActionsRow).Components {
			input := c.(*discordgo.TextInput)

			if input.CustomID == "payment_amount" {
				paymentAmount, err = strconv.ParseFloat(input.Value, 64)
				if err != nil {
					respondWithError(s, i, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
					return
				}
			} else if input.CustomID == "payment_note" {
				paymentNote = input.Value
			}
		}
	}

	// Validate payment amount
	totalDebtAmount, err := db.GetTotalDebtAmount(debtorDbID, creditorDbID)
	if err != nil {
		respondWithError(s, i, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏´‡∏ô‡∏µ‡πâ‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ")
		return
	}

	if paymentAmount <= 0 {
		respondWithError(s, i, "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
		return
	}

	if paymentAmount > totalDebtAmount*1.1 { // Allow slight overpayment
		respondWithError(s, i, fmt.Sprintf("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏´‡∏ô‡∏µ‡πâ (%.2f ‡∏ö‡∏≤‡∏ó) ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ", totalDebtAmount))
		return
	}

	// Process payment (for manual payments without slip verification)
	if paymentNote == "" {
		paymentNote = "‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏≠‡∏ó"
	}

	// Get unpaid transaction IDs to mark as paid
	unpaidTxIDs, _, unpaidTotal, err := db.GetUnpaidTransactionIDsAndDetails(debtorDbID, creditorDbID, 10)
	if err != nil {
		log.Printf("Error fetching unpaid transactions for modal payment: %v", err)
		// Continue with general debt reduction
		err = db.ReduceDebtFromPayment(debtorDiscordID, creditorDiscordID, paymentAmount)
		if err != nil {
			respondWithError(s, i, fmt.Sprintf("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: %v", err))
			return
		}
	} else {
		// If payment amount closely matches unpaid total, mark those transactions as paid
		if paymentAmount >= unpaidTotal*0.99 && paymentAmount <= unpaidTotal*1.01 {
			for _, txID := range unpaidTxIDs {
				err = db.MarkTransactionPaidAndUpdateDebt(txID)
				if err != nil {
					log.Printf("Error marking transaction %d as paid: %v", txID, err)
				}
			}
		} else {
			// Otherwise do a general debt reduction
			err = db.ReduceDebtFromPayment(debtorDiscordID, creditorDiscordID, paymentAmount)
			if err != nil {
				respondWithError(s, i, fmt.Sprintf("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: %v", err))
				return
			}
		}
	}

	// Respond with a success message
	content := fmt.Sprintf("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô %.2f ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö <@%s> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n", paymentAmount, creditorDiscordID)

	if len(unpaidTxIDs) > 0 {
		content += fmt.Sprintf("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: %v\n", unpaidTxIDs)
	}

	if paymentNote != "" {
		content += fmt.Sprintf("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: %s", paymentNote)
	}

	err = s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Content: content,
			Flags:   discordgo.MessageFlagsEphemeral,
		},
	})

	if err != nil {
		log.Printf("Error responding to pay debt modal: %v", err)
	}

	// Notify the creditor in public channel
	publicMessage := fmt.Sprintf("üí∞ <@%s> ‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô %.2f ‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö <@%s> ‡πÅ‡∏•‡πâ‡∏ß",
		debtorDiscordID, paymentAmount, creditorDiscordID)

	_, err = s.ChannelMessageSend(i.ChannelID, publicMessage)
	if err != nil {
		log.Printf("Error sending public payment notification: %v", err)
	}
}

// handleMarkPaidButton handles marking a transaction as paid
func handleMarkPaidButton(s *discordgo.Session, i *discordgo.InteractionCreate) {
	// Extract the transaction ID from the custom ID
	customID := i.MessageComponentData().CustomID
	txIDStr := strings.TrimPrefix(customID, "mark_paid_")

	txID, err := strconv.Atoi(txIDStr)
	if err != nil {
		respondWithError(s, i, "‡∏£‡∏´‡∏±‡∏™‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
		return
	}

	// Get transaction info
	txInfo, err := db.GetTransactionInfo(txID)
	if err != nil {
		respondWithError(s, i, fmt.Sprintf("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ TxID %d", txID))
		return
	}

	// Ensure the user is the payee
	payeeDbID := txInfo["payee_id"].(int)
	userDiscordID := i.Member.User.ID
	userDbID, err := db.GetOrCreateUser(userDiscordID)

	if err != nil || userDbID != payeeDbID {
		respondWithError(s, i, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß")
		return
	}

	// Check if already paid
	alreadyPaid := txInfo["already_paid"].(bool)
	if alreadyPaid {
		respondWithError(s, i, fmt.Sprintf("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ TxID %d ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", txID))
		return
	}

	// Mark as paid
	err = db.MarkTransactionPaidAndUpdateDebt(txID)
	if err != nil {
		respondWithError(s, i, fmt.Sprintf("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß: %v", err))
		return
	}

	// Get payer info for notification
	payerDiscordID := txInfo["payer_discord_id"].(string)
	amount := txInfo["amount"].(float64)
	description := txInfo["description"].(string)

	// Respond with success message
	err = s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Content: fmt.Sprintf("‚úÖ ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ TxID %d ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", txID),
			Flags:   discordgo.MessageFlagsEphemeral,
		},
	})

	if err != nil {
		log.Printf("Error responding to mark paid button: %v", err)
	}

	// Send a public notification
	publicMessage := fmt.Sprintf("‚úÖ <@%s> ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ \"**%s**\" (%.2f ‡∏ö‡∏≤‡∏ó) ‡∏à‡∏≤‡∏Å <@%s> ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß",
		userDiscordID, description, amount, payerDiscordID)

	_, err = s.ChannelMessageSend(i.ChannelID, publicMessage)
	if err != nil {
		log.Printf("Error sending public mark paid notification: %v", err)
	}
}
